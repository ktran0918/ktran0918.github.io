{"pages":[],"posts":[{"title":"promisifying functions","text":"I can’t imagine what it was like before Promises were implemented in JavaScript, mostly because I didn’t start learning JavaScript until after ECMAScript 6 came out. Without Promises, it is just not possible to coordinate asynchronous operations. They also produce much more readable code. Consider the readFile() method from Node’s fs module. Without Promises one might use it like this: 1234fs.readFile('example.txt', (err, data) =&gt; { if (err) console.error(err); console.log(data);}); Rather hard to read if you ask me. Imagine a scenario in which you might want to do more than printing to console, like sending that data to a client or parsing it for usable data. Or you may want to use it in a for loop, which is synchronous by nature. Worst case, you may want to call another asynchronous method later on, and thus end up with a callback within a callback. More of those and you enter “callback hell”. Promises to the RescuePromises allow you to return a proxy value to from an asynchronous function as you would with a synchronous one. That proxy value can later be resolved on success or rejected on failure. Therefore, Promises do not need callback functions. Any asynchronous method can be wrapped in a Promise, or “promisified”. Starting with Node v8, the built-in util module features a promisify() method for this purpose. Let’s use it on the readFile() example: 12const { promisify } = require('util');const readFile = promisify(fs.readFile); ES6 introduces the syntactic sugar await that makes writing Promises even better. Also, use it with try and catch for error handling: 12345678try { let data = readFile('example.txt'); // Do something else while waiting for readFile to resolve ... console.log(await data);} catch (err) { console.error(err);} Important: Remember that the keyword await can only be used in an async function! Check back later for another post on using Promises efficiently!","link":"/2020/02/29/promisifying-functions/"}],"tags":[{"name":"javascript, promises, async, await, node.js","slug":"javascript-promises-async-await-node-js","link":"/tags/javascript-promises-async-await-node-js/"}],"categories":[{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"}]}